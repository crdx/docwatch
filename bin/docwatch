#!/usr/bin/env ruby
require_relative '../lib/docwatch'
include Docwatch

DOCS = <<~EOF
    #{'Usage:'.bold}
        #{File.basename($0)} [options] [<file-path>]

    #{'Options:'.bold}
        -p, --port=VALUE   Listen port [default: 8888]
        -v, --verbose      Verbose
        -h, --help         Help
        -V, --version      Version

    #{'Renderers:'.bold}
        markdown (.md)
        html     (.html)

    If #{'--port'.bold} is #{'random'.bold} a random port will be chosen, otherwise
    the specified one will be used. The default is 8888.

    In #{'--verbose'.bold} mode, incoming HTTP requests and file change event
    notifications will be printed to standard output.
EOF

class App
    def initialize(opts)
        @opts = opts
    end

    def self.run(opts)
        new(opts).run
    end

    def params
        @params ||= OpenStruct.new({
            verbose: @opts['--verbose'],
            version: @opts['--version'],
            help: @opts['--help'],
            file_path: @opts['<file-path>']
        })
    end

    def port
        @port ||= if @opts['--port'] == 'random'
            # TODO: check if this port is in use
            10000 + Random.random_number(50000)
        else
            @opts['--port']
        end
    end

    def url
        'http://localhost:%s' % port
    end

    def port_valid
        true
    end

    def exit_usage
        puts DOCS
        exit 0
    end

    def exit_version
        puts Docwatch::VERSION
        exit 0
    end

    def exit_invalid_arguments
        puts 'Invalid arguments'.red
        exit 1
    end

    def exit_invalid_file
        puts 'File does not exist: %s'.red % params.file_path
        exit 2
    end

    def exit_unknown_renderer
        puts 'No suitable renderer found for %s'.red % params.file_path
        exit 3
    end

    def exit_invalid_port
        puts 'Invalid port %s'.red % port
    end

    def run
        exit_version if params.version
        exit_usage if params.help
        exit_invalid_arguments unless params.file_path
        exit_invalid_file unless File.exist?(params.file_path)
        exit_invalid_port unless port_valid

        renderer = Renderer.by_filetype(params.file_path)
        exit_unknown_renderer if renderer.nil?

        server = TCPServer.new(port)
        logger = Logger.new(params.verbose)
        watcher = Watcher.new(params.file_path)

        Thread.new do
            while socket = server.accept
                Thread.new do
                    Connection.handle(
                        renderer,
                        watcher,
                        logger,
                        Session.new(socket, logger)
                    )
                end
            end
        end

        puts ('Started server on %s, renderer %s' % [url, renderer.class]).yellow
        puts 'Press enter to open page in the default handler (xdg-open)'.green

        begin
            while STDIN.gets
                system('xdg-open %s' % url)
            end
        rescue Interrupt => e
            puts
            puts 'Bye'
        end
    end
end

begin
    App.run(Docopt::docopt(DOCS, help: false))
rescue Docopt::Exit => e
    puts 'Invalid arguments.'.red
    exit 1
end
