#!/usr/bin/env ruby
require_relative '../lib/docwatch'
include Docwatch

Params = Struct.new(
    :verbose,
    :version,
    :file_path,
    :default_styles,
    keyword_init: true,
)

class Main
    def initialize(opts)
        @opts = opts
    end

    def self.run(opts)
        new(opts).run
    end

    def params
        @params ||= Params.new(
            verbose: @opts['--verbose'],
            version: @opts['--version'],
            file_path: @opts['<file-path>'],
            default_styles: @opts['--default-styles'],
        )
    end

    def port
        if @opts['--port'] == 'random'
            # TODO: check if this port is in use
            @port ||= 10_000 + Random.random_number(50_000)
        else
            @port ||= @opts['--port']
        end
    end

    def url
        'http://localhost:%s' % port
    end

    def port_valid
        true
    end

    def exit_version
        puts Docwatch::VERSION
        exit 0
    end

    def exit_invalid_file
        puts 'File does not exist: %s'.red % params.file_path
        exit 2
    end

    def exit_unknown_renderer
        puts 'No suitable renderer found for %s'.red % params.file_path
        exit 3
    end

    def exit_invalid_port
        puts 'Invalid port %s'.red % port
    end

    def run
        exit_version if params.version
        exit_invalid_file unless File.exist?(params.file_path)
        exit_invalid_port unless port_valid

        renderer = Renderer.by_filetype(params.file_path, params.default_styles)
        exit_unknown_renderer if renderer.nil?

        server = TCPServer.new(port)
        logger = Logger.new(params.verbose)
        watcher = Watcher.new(params.file_path)

        Thread.new do
            while (socket = server.accept)
                Thread.new do
                    Connection.handle(
                        renderer,
                        watcher,
                        Session.new(socket, logger),
                    )
                end
            end
        end

        puts 'Started server on %s, renderer %s'.yellow % [url, renderer.class]
        puts 'Press enter to open page in the default handler (xdg-open)'.green

        begin
            while $stdin.gets
                system('xdg-open %s' % url)
            end
        rescue Interrupt
            puts
            puts 'Bye!'
        end
    end
end

PROGRAM_NAME = File.basename($PROGRAM_NAME)

usage = <<~EOF
    Usage:
        #{PROGRAM_NAME} [options] <file-path>
        #{PROGRAM_NAME} --version

    Options:
        -p, --port VALUE        Listen port [default: 8888]
                                Set to 'random' for a random port
        -d, --default-styles    Use default styling
        --verbose               Be verbose
        -v, --version           Show version

    Renderers:
        markdown    (.md)
        html        (.html)
EOF

begin
    Main.run(Docopt.docopt(usage))
rescue Docopt::Exit
    puts usage
    exit 2
end
